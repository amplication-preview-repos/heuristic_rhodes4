/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { YouTubeChannel } from "./YouTubeChannel";
import { YouTubeChannelCountArgs } from "./YouTubeChannelCountArgs";
import { YouTubeChannelFindManyArgs } from "./YouTubeChannelFindManyArgs";
import { YouTubeChannelFindUniqueArgs } from "./YouTubeChannelFindUniqueArgs";
import { CreateYouTubeChannelArgs } from "./CreateYouTubeChannelArgs";
import { UpdateYouTubeChannelArgs } from "./UpdateYouTubeChannelArgs";
import { DeleteYouTubeChannelArgs } from "./DeleteYouTubeChannelArgs";
import { VideoFindManyArgs } from "../../video/base/VideoFindManyArgs";
import { Video } from "../../video/base/Video";
import { User } from "../../user/base/User";
import { YouTubeChannelService } from "../youTubeChannel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => YouTubeChannel)
export class YouTubeChannelResolverBase {
  constructor(
    protected readonly service: YouTubeChannelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "YouTubeChannel",
    action: "read",
    possession: "any",
  })
  async _youTubeChannelsMeta(
    @graphql.Args() args: YouTubeChannelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [YouTubeChannel])
  @nestAccessControl.UseRoles({
    resource: "YouTubeChannel",
    action: "read",
    possession: "any",
  })
  async youTubeChannels(
    @graphql.Args() args: YouTubeChannelFindManyArgs
  ): Promise<YouTubeChannel[]> {
    return this.service.youTubeChannels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => YouTubeChannel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "YouTubeChannel",
    action: "read",
    possession: "own",
  })
  async youTubeChannel(
    @graphql.Args() args: YouTubeChannelFindUniqueArgs
  ): Promise<YouTubeChannel | null> {
    const result = await this.service.youTubeChannel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => YouTubeChannel)
  @nestAccessControl.UseRoles({
    resource: "YouTubeChannel",
    action: "create",
    possession: "any",
  })
  async createYouTubeChannel(
    @graphql.Args() args: CreateYouTubeChannelArgs
  ): Promise<YouTubeChannel> {
    return await this.service.createYouTubeChannel({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => YouTubeChannel)
  @nestAccessControl.UseRoles({
    resource: "YouTubeChannel",
    action: "update",
    possession: "any",
  })
  async updateYouTubeChannel(
    @graphql.Args() args: UpdateYouTubeChannelArgs
  ): Promise<YouTubeChannel | null> {
    try {
      return await this.service.updateYouTubeChannel({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => YouTubeChannel)
  @nestAccessControl.UseRoles({
    resource: "YouTubeChannel",
    action: "delete",
    possession: "any",
  })
  async deleteYouTubeChannel(
    @graphql.Args() args: DeleteYouTubeChannelArgs
  ): Promise<YouTubeChannel | null> {
    try {
      return await this.service.deleteYouTubeChannel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Video], { name: "videos" })
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "read",
    possession: "any",
  })
  async findVideos(
    @graphql.Parent() parent: YouTubeChannel,
    @graphql.Args() args: VideoFindManyArgs
  ): Promise<Video[]> {
    const results = await this.service.findVideos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: YouTubeChannel
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
