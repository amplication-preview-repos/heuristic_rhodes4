/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  YouTubeChannel as PrismaYouTubeChannel,
  Video as PrismaVideo,
  User as PrismaUser,
} from "@prisma/client";

export class YouTubeChannelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.YouTubeChannelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.youTubeChannel.count(args);
  }

  async youTubeChannels(
    args: Prisma.YouTubeChannelFindManyArgs
  ): Promise<PrismaYouTubeChannel[]> {
    return this.prisma.youTubeChannel.findMany(args);
  }
  async youTubeChannel(
    args: Prisma.YouTubeChannelFindUniqueArgs
  ): Promise<PrismaYouTubeChannel | null> {
    return this.prisma.youTubeChannel.findUnique(args);
  }
  async createYouTubeChannel(
    args: Prisma.YouTubeChannelCreateArgs
  ): Promise<PrismaYouTubeChannel> {
    return this.prisma.youTubeChannel.create(args);
  }
  async updateYouTubeChannel(
    args: Prisma.YouTubeChannelUpdateArgs
  ): Promise<PrismaYouTubeChannel> {
    return this.prisma.youTubeChannel.update(args);
  }
  async deleteYouTubeChannel(
    args: Prisma.YouTubeChannelDeleteArgs
  ): Promise<PrismaYouTubeChannel> {
    return this.prisma.youTubeChannel.delete(args);
  }

  async findVideos(
    parentId: string,
    args: Prisma.VideoFindManyArgs
  ): Promise<PrismaVideo[]> {
    return this.prisma.youTubeChannel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .videos(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.youTubeChannel
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
